; *********************************************
; ФУНКЦИИ ДЛЯ РАБОТЫ С ПАМЯТЬЮ
; *********************************************

; ---------------------------------------------
; Включение режима страничной адресации
; ---------------------------------------------
enable_paging:

        mov edi, const_PDBR

        ; Записываем ссылку на нулевой каталог (4Мб)
        ; ------------------------
        mov eax, const_PAGE4MB or 0x3
        stosd

        ; Остальные ссылки на каталоги заполняются нулями
        ; ------------------------
        mov ecx, 1023
        xor eax, eax
        rep stosd

        ; Очищается первый каталог
        ; ------------------------
        mov edi, const_PAGE4MB
        mov ecx, 1024
        xor eax, eax
        rep stosd

        ; Заполняется каталог 0 (первые 4 Мб)
        ; ------------------------
        mov eax, 0x3 ; Present + U/S=1 [super user access]
        mov ecx, 1024
        mov edi, const_PAGE4MB

@@:     stosd
        add eax, 0x1000
        loop @b

        ; Установка в битовую маску отметки о заполненности памяти
        ; ------------------------
        mov edi, const_BITMASK

        xor eax, eax
        dec eax
        mov cl, 0x20 ; 4 * 128 * 8 * 4096 = 4мб
        rep stosd

        ; Включение режима страничной работы с памятью
        mov eax, const_PDBR
        mov cr3, eax

        mov eax, cr0
        or  eax, 0x80000000
        mov cr0, eax

        ; Занесение в TLB
        jmp @f 
@@:     ret


; ---------------------------------------------
; Выделение памяти и запись ссылок в [ds:edi]
; На вход:  eax (количество страниц), edi (куда писать данные)
; На выход: ---
; Память выделяется, основываясь на текущем CR3
; ---------------------------------------------
; var a1 (указатель, куда писать)

malloc: 

        enter 4, 0
        push eax ecx edi esi

        mov  ecx, eax
        mov  [a1], edi

        ; mov esi, const_BITMASK + 0x80 ; 
        xor  edi, edi

        ; Поиск физической свободной страницы
@@:     call search_free_page
        and  eax, eax
        je .error
        
        mov  esi, [a1]
        mov  [esi], eax
        add  dword [a1],  4
        loop @b

        ; Память успешно выделена
        pop esi edi ecx eax      
        clc
        leave
        ret
        
.error: ; Не хватает памяти       
        pop esi edi ecx eax      
        stc
        leave
        ret

; Выделение новой страницы
; ---------
.create_page:

        ret        

; ---------------------------------------------------------------------------------
; Поиск свободной страницы (если esi = 0, начинать с const_BITMASK + 0x1FFFC)
; IN  edi - начальная позиция
; OUT eax - найденный адрес страницы, edi - текущий указатель на не заполенный блок
;           если на выходе eax = 0, то значит, страница является ошибочной
; ---------------------------------------------------------------------------------
search_free_page:        

        push ebx edx ecx

        ; Если параметр нулевой, то установить в начало битовой маски
        and  edi, edi
        jne  @f
        mov  edi, const_BITMASK + 0x80 ; пропуск уже выделенных 4мб 
@@:     mov  ecx, 0x20000 / 4
        mov  eax, 0xFFFFFFFF
        repz scasd

        and  ecx, ecx
        je .error

        ; Загрузить биты
        sub  edi, 4
        mov  eax, [edi]

        ; 32 бита = 4096 страниц
        mov  ecx, 0
        mov  edx, 1

.bit_test:

        ; Эта страница занята?
        test eax, edx 
        jne @f

        ; ----
        ; СТРАНИЦА НАЙДЕНА
        ; Вычисление адреса страницы по номеру бита
        ; ----

        mov  eax, edi
        sub  eax, const_BITMASK
        shl  eax, 3   ; 1 байт = 8 страниц
        add  eax, ecx ; Смещение в битовом эквиваленте
        shl  eax, 12  ; Реальный адрес страницы

        or   [edi], edx ; Зарезервировать бит для будущего
        jmp .exit

        ; Переход к следующему биту
@@:     shl  edx, 1 ; 
        inc  ecx
        cmp  cl, 0x20
        jne .bit_test

        ; К следующему Dword
        add  edi, 4
        jmp .bit_test

.error: ; Все страницы для поиска закончились
        xor  eax, eax

        ; Выход
.exit:  pop ecx edx ebx      
        ret        

; ---------------------------------------------------------------------------------
; Записать в каталог страниц ссылку на новую страницу
; IN: eax - номер страницы в каталоге (линейно), ebx - ссылка на страницу
; ---------------------------------------------------------------------------------

write_cr3_catalog:

        ret